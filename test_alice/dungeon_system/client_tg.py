import json
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode, ChatAction
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from game_master import get_dm_answer

logging.basicConfig(level=logging.INFO)

# TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TOKEN = "7644370360:AAHGfBBJQ3xJuI2h3WkGa1JOXoRCgwL2wqs"
bot = Bot(token=TOKEN)
dp = Dispatcher()

class ChatState(StatesGroup):
    active = State()

class FeedbackState(StatesGroup):
    waiting_for_rating = State()
    waiting_for_comment = State()

active_chats = {}

def save_to_json(user_data: dict):
    try:
        with open('conversations.json', 'r+', encoding='utf-8') as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                data = []
            data.append(user_data)
            f.seek(0)
            json.dump(data, f, ensure_ascii=False, indent=2)
    except FileNotFoundError:
        with open('conversations.json', 'w', encoding='utf-8') as f:
            json.dump([user_data], f, ensure_ascii=False, indent=2)

@dp.message(Command('start'))
async def start_chat(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    
    if user_id in active_chats or await state.get_state() is not None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ.")
        return
    
    await state.set_state(ChatState.active)
    active_chats[user_id] = []
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û —á–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∏ –∫–∞–∫–æ–π –¥–ª–∏–Ω—ã? –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")

@dp.message(ChatState.active)
async def handle_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in active_chats:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")
        return
    
    active_chats[user_id].append({"role": "user", "content": message.text})
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await bot.send_chat_action(
            chat_id=message.chat.id,
            action=ChatAction.TYPING
        )
        
        updated_history = get_dm_answer(active_chats[user_id])
        active_chats[user_id] = updated_history
        
        last_message = updated_history[-1]['content']
        builder = InlineKeyboardBuilder()
        builder.button(text="‚èπÔ∏è –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä", callback_data="stop_chat")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await message.answer(
            last_message,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logging.error(f"Error: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

@dp.callback_query(F.data == "stop_chat")
async def stop_chat(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in active_chats:
        await callback.answer("–î–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return
    
    chat_history = active_chats.pop(user_id)
    await state.set_state(FeedbackState.waiting_for_rating)
    await state.update_data(chat_history=chat_history)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üëç –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data="feedback_like")
    builder.button(text="üëé –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", callback_data="feedback_dislike")
    await callback.message.answer("–û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –¥–∏–∞–ª–æ–≥:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("feedback_"))
async def handle_feedback(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    await state.update_data(rating=action)
    
    if action == "dislike":
        await state.set_state(FeedbackState.waiting_for_comment)
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å:")
    else:
        data = await state.get_data()
        user_data = {
            "user_id": callback.from_user.id,
            "timestamp": datetime.now().isoformat(),
            "history": data['chat_history'],
            "rating": data['rating'],
            "comment": None
        }
        save_to_json(user_data)
        await state.clear()
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å /start")

@dp.message(FeedbackState.waiting_for_comment)
async def handle_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_data = {
        "user_id": message.from_user.id,
        "timestamp": datetime.now().isoformat(),
        "history": data['chat_history'],
        "rating": data['rating'],
        "comment": message.text
    }
    save_to_json(user_data)
    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å /start")

if __name__ == '__main__':
    dp.run_polling(bot)